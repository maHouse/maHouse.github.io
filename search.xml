<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[对象]]></title>
      <url>/2017/05/21/object/</url>
      <content type="html"><![CDATA[<p><strong>1.全局对象：</strong></p>
<p>全局属性：undefined、NaN、infinity</p>
<p>全局函数：isNaN()、parseInt()、eval()</p>
<p>全局对象：Math、JSON</p>
<p>构造函数：Date（）、RegExp()、String（）、Object（）、Array（）</p>
<p><strong>2.包装对象</strong></p>
<p>JavaScript里有些原始值如：字符串、数字、布尔值，它们是有自己的属性和方法的，那么它们不是对象，属性和方法又从何而来呢？</p>
<p>那我们就先从说对象说起，对象是一系列属性名和属性值的集合体。对象要引用属性值就用”.”加上属性名来引用；对象里的方法是用函数表示的，引用的时候用o.m()来表示。</p>
<p>不同的是，原始值里的字符串、数字和布尔值的属性和方法是不能被定义新的值的，而对象里面是能改变的。</p>
<p>在例子中：</p>
<pre><code>var s = &apos;test&apos;;
s.len = 4;
s.indexOf(&apos;t&apos;) = 0;
</code></pre><p>在上面的例子中s是字符串，但是具有自己的属性和方法，它的实现方式是在s引用自己的属性和方法时，就会通过new String(s)创建一个临时对象，这个对象会继承s的特点。这个临时对象在用到的时候会被创建出来，一旦不用就会被销毁。</p>
<p>例如：</p>
<pre><code>var s = &apos;test&apos;;
s.len = 4;//这里是设置的新的属性值
var t = s.len;
console.log(t);//undefined
</code></pre><p>在s.len = 4;使用完后，这个属性就被销毁了，不会在往下传递了，所以打印的结果是undefined；不是length哟！代码测试如果用下面的代码：<br>    var s = ‘test’;<br>    s.length = 4;<br>    var t = s.length;<br>    console.log(t);//这个结果就是4了</p>
<p>可以运用构造函数来显示的创建包装对象，</p>
<pre><code>var s = &apos;test&apos;,n = 1,b = true;
var S = new String(s);
var N = new Number(n);
var B = new Boolean(b);
</code></pre><p>如果我们用’ == ‘来判断s与S、n与N、b与B的话，结果是true；如果用’ === ‘恒等式来判断的话，就不是这个结果了。</p>
<p>JavaScript中的值的类型会根据需要字型转变，无论进行什么运算，共同的值类型是每个单独的值都能转换过去的，转换的又隐式转换和显式转换</p>
<p>例如： </p>
<p>‘5’<em>‘6</em>;//30,//改变就是从字符串变化到了数字类型</p>
<p> 30 + ‘object’;//这里就只能转变为字符串了</p>
<p>parseInt() =&gt;意思是把值转换为16进制的，目前就是这么多了！不足的话就再加补充。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的数据类型]]></title>
      <url>/2017/05/18/JS-data-type/</url>
      <content type="html"><![CDATA[<p>JavaScript的数据是放在内存中的，而我们也知道数字、字符串等在内存中的存储方式、所占存储空间是不同的，分类就诞生了。JavaScript中的数据类型分为：基础数据类型（原始数据类型）、对象类型。</p>
<p>原始数据类型：<strong>数字（number）</strong>、<strong>字符串（string）</strong>、<strong>布尔值（Boolean）</strong>、<strong>null</strong>和<strong>undefined</strong>。</p>
<p>对象类型：<strong>Math（数字）</strong>、<strong>Date（日期）</strong>、<strong>Array（数组）</strong>、<strong>Function（函数）</strong>、<strong>RegExp（正则表达式）</strong>，这几种基础数据类型，先说第一个number吧！</p>
<h2 id="1-数字（number）"><a href="#1-数字（number）" class="headerlink" title="1.数字（number）"></a>1.数字（number）</h2><p>没啥意思，这个表示的就是数字，而数字中又分为整型和浮点型，就是整数和小数或分数。不好意思的是，JavaScript中没有具体的再区分它们两个，而是就用浮点型表示数字：1 == 1.0，这个是成立的。</p>
<p>运算符：+（加）、-（减）、*（乘）、/（除）、%（取余），运算也就是这个几个或者是几个的复合运算。</p>
<p>JavaScript数字的几个概念</p>
<p>无穷大（infinity），一个忒大的数字，出现了溢出（overflow），上溢出；</p>
<p>负无穷（-infinity），一个忒小的数字，出现了下溢出（underflow）；</p>
<p>除此之外，还有个中特别的存在就是非数字（not-a-number既NaN)，NaN是非数字的意思，情况有几种：无穷大除以无穷大、负数开平方、非数字或者不能获得数字的运算符进行了运算，这几种情况都是出现NaN。</p>
<p>NaN是个孤独的游魂，他没有伙伴，我们只能证明一个值不是NaN，而不能证明一个值是NaN，表达式是：</p>
<p> x != NaN,不能写作 x == NaN(后者是个错误的存在)。</p>
<p>上面的仅仅是数字的相关知识，还有Math对象对于数字的操作运算，这个下次再做分析。</p>
<h2 id="2-字符串（string）"><a href="#2-字符串（string）" class="headerlink" title="2.字符串（string）"></a>2.字符串（string）</h2><p>字符串就是个有次数的不可改变的16位值的序列，字符串的表现形式就是把值放到单引号’’或者双引号””里面，或者是个空值也可以。</p>
<p>因为JavaScript是用UTF-16编码的Unicode字符集，所以JavaScript的所有字符都是16位的。次序就是在字符串中相同字符也是有不同的索引的，不可改变就从字符串的所有方法看吧！</p>
<p>方法一是获取相关值</p>
<p>s.charAt();//用数字获取相关位置的值，因此里面填的是数字</p>
<p>s.substring(a,b);//两个数字，包前不包后</p>
<p>s.slice(a,b)；//同上</p>
<p>s.indexOf();//里面的字符串值，出现的就是这个字符的首次出现的位置的索引</p>
<p>s.lastIndexOf();//方法类似于上面</p>
<p>s.split();//以什么作为分割点</p>
<p>s.replace();//两个字符，前面的用后面的值来代替</p>
<p>s.toUpperCase();//变为大写</p>
<p>下面就用代码来实现一下，证实一下原字符串是不是不可改变的：</p>
<pre><code>var s = &quot;hello world&quot;;

console.log(s.indexOf(&apos;o&apos;));
console.log(s.lastIndexOf(&apos;o&apos;));
console.log(s.charAt(2));
console.log(s.toUpperCase());
console.log(s.substring(0,3));//同样是包前不包后
console.log(s.slice(2));//包前不包后，因为2后面没有结尾意思就是到最后
console.log(s.replace(&apos;w&apos;,&apos;W&apos;));
console.log(s.split(&apos;v&apos;));//这个就是字符串里没有的话，可以说是没有用的
console.log(s.split(&apos; &apos;));
</code></pre><h2 id="3-布尔值（boolean）"><a href="#3-布尔值（boolean）" class="headerlink" title="3.布尔值（boolean）"></a>3.布尔值（boolean）</h2><p>布尔值代表的意思是真或假、开或关、是或否，多用于控制结构的比较语句中，这个类型只有两个值：true、false。</p>
<p>JavaScript中的任意值都能转换成布尔值，下面的这些值能转换成false：undefined、null、0、-0、””(空字符串)、NaN，所有其他值包括对象（数组）则被转换成true。</p>
<p>用个例子：声明个变量o,<strong>if(o ！== null)</strong>再有一个<strong>if(o)</strong>,前个例子是证明变量o是不是null值，不是的话会执行下去，后一个变量是意思是为真（o不是false、null和undefined）的时候会执行下去。</p>
<p>关于布尔值的在有的话就是运算符的运用了！AND（&amp;&amp;）、OR（||）、非（NOT既！）。</p>
<h2 id="4-null和undefined"><a href="#4-null和undefined" class="headerlink" title="4.null和undefined"></a>4.null和undefined</h2><p>null就是程序级别的，不是系统报错报出来的，是我们可以写出来的，我们可以写作参数的；undefined是系统报错的，我们不期望遇到，遇到的原因大概有三：</p>
<p>①我们声明了变量，但是没有给变量赋值</p>
<p>如：    </p>
<pre><code>var a;

console.log(a);//这里打印出来的就是undefined
</code></pre><p>②参数的形式参数的引用了却没有实参</p>
<p>如：</p>
<pre><code> function a (b,c,d){

    console.log(b + c);

    console.log(d);//这里打印出来的就是undefined
  }

a(1,0);
</code></pre><p>好玩的是如果console.log(b + c + d);这里打印出来的值是NaN，你想想一个数字加undefined，结果就是NaN。</p>
<p>③再有一个现象就是对象里，我们有3个值，你非要找第四个值，那是没有了，只会报出undefined。</p>
<p>为了避免出现undefined的现象，我们一定要注意几个原因，声明变量的时候，</p>
<p>如：newHtml = “”;//不要只声明了不初始化值。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo中域名的配置]]></title>
      <url>/2017/05/16/my-domain/</url>
      <content type="html"><![CDATA[<p>这个时候，你的.io的github网站是可以使用的了，接下来就是怎么使用自己的域名去搞定一切了！OK,我们开始吧！</p>
<p><a href="http://www.szhot.com/" target="_blank" rel="external">http://www.szhot.com/</a>我的是在万维网申请的，在万维网你要做几件事：</p>
<p>1.申请一个域名，花多少钱，就看你自己个了！这一步就是给自己的网站起了个名字。</p>
<p>2.购买一个虚拟主机，花多少钱看你自己，有了名字但没有IP地址，就是服务器端没有你的空间，这一步就是在服务器端有个你的位置。</p>
<p>3.OK！为了顺利完成工作，你还要做：</p>
<p>①</p>
<p><img src="/image/www.png" alt=""></p>
<p>切记这三部分是必须完成的，光标点亮后才能进行下一步的工作；</p>
<p>②身份证正反面复印件，必须在一面上，还要有你的签名，按要求做吧；</p>
<p>③</p>
<p><img src="/image/kwww2.jpg" alt=""></p>
<p>这里还有一步关键，在你的E:\blog\source里，就是你的文件路径里配置个CNAME文件，没有后缀，在里面写上你的域名（不加www的域名）。这个下面就要用到了。</p>
<p><strong>按这个步骤进行操作</strong>圈子里的我们改成这个样子的，不要会错了意！！！</p>
<p>把这个搞好后就开始进行在dnspod上的修改，选择dnspod的原因是稳定！<a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></p>
<p>修改的地方在哪里呢？请看：</p>
<p><img src="/image/www3.png" alt=""></p>
<p>在域名解析里，这个域名是我添加进来了，你要添加进来，点击进来</p>
<p><img src="/image/www4.png" alt=""></p>
<p>圈子里的是你照搬的，这个是github的IP地址，不用的话是找不到你的网页的。<br>而最下面的主机记录:www,记录类型:CNAME,记录值是你的github网址，OK了！<br>一切准备就绪！千万记得，hexo g和hexo d命令，把你的修改给布置到页面上来！</p>
<p>欢迎大家来践踏我的博文<a href="mashuaiqi.com">mashuaiqi.com</a>，，，，欢迎！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[markdownpad快捷键分享]]></title>
      <url>/2017/05/15/markdownpad/</url>
      <content type="html"><![CDATA[<p>Markdownpad是你编写博客的利器，使用的时候你可以用鼠标去为句子或者词语加粗、加链接、加图片等，但是快捷键的魅力之处就是一个词—快，快的不要不要的。</p>
<p><strong>Ctrl + I ： 斜体</strong></p>
<p><strong>Ctrl + B ： 粗体</strong></p>
<p><strong>Ctrl + G ： 图片</strong></p>
<p><strong>Ctrl + Q ： 引用</strong></p>
<p><strong>Ctrl + 1 ： 标题 1</strong></p>
<p><strong>Ctrl + 2 ： 标题 2</strong></p>
<p><strong>Ctrl + 3 ： 标题 3</strong></p>
<p><strong>Ctrl + K ： 代码块</strong></p>
<p><strong>Ctrl + L ： 超链接</strong></p>
<p><strong>Ctrl + T ： 时间戳</strong></p>
<p><strong>Ctrl + U ： 无序列表</strong></p>
<p><strong>Ctrl + R ： 水平标尺</strong></p>
<p><strong>F4 ： 启用水平布局</strong></p>
<p><strong>F5 ： 启用实时预览</strong></p>
<p><strong>F6 ： 在浏览器中预览</strong></p>
<p><strong>Ctrl + Shift + O ： 有序列表</strong></p>
<p>Ok！大家如果有更好的好玩的工具，分享给我哟！谢谢你们了！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript 诞生记]]></title>
      <url>/2017/05/13/javascript-txt/</url>
      <content type="html"><![CDATA[<p><strong>十八世纪英国文学家约翰逊博士对JavaScript说过一句很好的话，它的优秀之处并非原创，它的原创之处并不优秀。</strong></p>
<p>多么牛叉的一句话啊！那为什么这么说呢？我们看看JavaScript是怎么诞生的。</p>
<p>1994年，网景公司发布了第一个比较成熟的网络浏览器，但它仅仅支持浏览文件，就是你只能看，不能进行页面之间的互动，多么尴尬啊！Netscape需要一种网页脚本语言，使得网页之间通过浏览器进行互动。</p>
<p>那到底选择哪种语言呢？公司众说纷纭，选择现有的语言，如：Scheme、Python等，有现有的代码和程序员；不然的话，就发明一种更好的新语言。</p>
<p>这个时候公司招聘进来一个哥们–Brendan  Eich，他对函数式编程很感兴趣，公司招聘他的目的就是研究将Scheme作为网页脚本语言的可能性。这个时候Java是很火爆的，网景管理层也煞是迷恋。后来，网景公司有个决定，这个将要诞生的网页脚本语言必须与Java足够相似，使得非专业者也能很快上手。</p>
<p>既然有了要求就开始做个筛选吧！Java是面向对象编程的，而已经存在的语言，如：Perl、Python、Tcl、Scheme，它们是非面向对象的，因此他们自然就被排除在外了。作为简化版的Java语言的设计师—Brendan  Eich反而对Java不感冒。</p>
<p>这兄弟就开始一顿乱搞了，七拼八凑的，10天就把JavaScript给造出来了。</p>
<p>他的设计思路是：</p>
<ol>
<li><strong>借鉴C语言的基本语法；</strong></li>
<li><strong>借鉴Java的数据类型和内存管理；</strong></li>
<li><strong>借鉴C语言的基本语法；</strong></li>
<li><strong>借鉴Self语言，使用基于原型（prototype）的继承机制，对象就随之出现；</strong></li>
</ol>
<p>综上知：<strong>JavaScript = 简化的函数式编程 + 面向对象编程</strong>，这是多么愉快的决定啊！把Java作为JavaScript的设计原型，这是公司的决定，在既圆了公司管理层的决定，又有自己的决定在里面，这个东西本来就是一种迎合公司和自己的杂合物。</p>
<p>在结束的时候回味一下约翰逊博士的话，应该能有所体悟吧！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象方法]]></title>
      <url>/2017/04/27/oop/</url>
      <content type="html"><![CDATA[<h2 id="一、-面向对象方法出现的原因"><a href="#一、-面向对象方法出现的原因" class="headerlink" title="一、 面向对象方法出现的原因"></a>一、 面向对象方法出现的原因</h2><p>传统软件工程方法的确给软件产业带来了巨大进步，但它仅在中小规模软件开发中获得了好成绩，在大型的软件开发中很少取得成功。因此，后来面向对象技术得到了开发者的青睐。</p>
<h2 id="二、-面向对象方法的4个要点"><a href="#二、-面向对象方法的4个要点" class="headerlink" title="二、 面向对象方法的4个要点"></a>二、 面向对象方法的4个要点</h2><p><strong>1.</strong>树立对象意识，客观世界是有各种对象组成的，复杂的对象由简单的对象组成。因此，面向对象的软件系统是由对象组成的，软件中的任何元素都是对象，复杂的对象由简单的对象组成。与传统方法的区别是用对象分解代替了其功能分解。</p>
<p><strong>2.</strong>把所有对象划分为各种对象类，每个类都定义了一组数据和方法。数据用于表示数据的静态属性，乃对象的静态属性，每当建立一个对象类的实例时，就按照对象类中对数据的定义，生成一组专用的数据。例如，荧光屏上不同位置显示的半径各不相同的圆，虽然都是Circle类的对象，但都有自己的专属数据，以便记录各自的圆心位置、半径等。</p>
<p>类中定义的方法，是允许施加于该类对象上的操作，是该类所有对象共享的，并不需要为每个对象都复制操作的代码。因为过程是一样的或是类似的，我们把操作的流程（操作）给定义下来，就是一条流水线生产多种产品了。</p>
<p><strong>3.</strong>按照子类与父类的关系，把若干对象类组成一个系统，下层的类与上层类的特性相同，这就是一种继承现象。同时也得晓得底层的类能屏蔽高层类的同名特性。</p>
<p><strong>4.</strong>对象彼此之间仅能通过传递信息相互联系。这里也与传统方法的数据有本质的区别，它不是被动的等待外界世界对它施加操作，相反的是，它是进行操作的主体，不能直接从外部世界修改它的私有数据，所有的私有数据都是封装在对象类中，这就是封装性。</p>
<h2 id="三、-面向对象方法的优点"><a href="#三、-面向对象方法的优点" class="headerlink" title="三、 面向对象方法的优点"></a>三、 面向对象方法的优点</h2><p><strong>1.</strong>符合人类的思维特点</p>
<p>抽象为一般的特点，然后再说一个个个例的不同之处。例如，我们说动物，我们会把具有某些相似特征的生物划分为动物，ok！有了动物，那么我们还要更加细化，则在根据某些特征抽象出来，比如把人从动物里就可以抽象出来。</p>
<p><strong>2.</strong>稳定性好</p>
<p>功能发生改变，在传统方法里，因为功能分析和功能分解，如果功能需求发生改变，改变的是整个软件结构，这个量很大的。相反，在面向对象方法里，仅仅通过修改局部方法就可以，不必修改全部。</p>
<p><strong>3.</strong>可重用性好</p>
<p>可以用旧的零件做新的产品，重复使用一个对象类，创建新的实例或者在对象类里增加数据和方法，都是不影响原来的使用。</p>
<p><strong>4.</strong>容易开发大型的软件</p>
<p>原因就是，把大的软件产品分解为许多相互独立的小个体，技术难度降低、开发管理更容易。</p>
<p><strong>5.</strong>可维护性好</p>
<p>面向对象方法开发的软件稳定性好、易于修改、容易理解更加易于测试，总体就突出了它的可维护性好的特点。</p>
<h2 id="四、-面向对象的概念介绍"><a href="#四、-面向对象的概念介绍" class="headerlink" title="四、 面向对象的概念介绍"></a>四、 面向对象的概念介绍</h2><p><strong>1.</strong>说说对象的特点</p>
<p>①以数据为中心。因为数据是对象数据结构的一部分，是它的状态。</p>
<p>②本质上具有并行性。不同对象各自独立处理自身数据，彼此通过发送消息传递信息完成通信。因此，具有并行工作的属性。</p>
<p>③模块独立性好。模块与对象的关系，对象本身就是面向对象的软件的基本模块，模块讲究的内聚性和耦合性在对象上能充分体现出来。因为对象的数据和属性是在一个对象类里面的，操作也是在这里面的，作为一个基本的模块单元，它的内聚性很高。也因为这个原因，对象之间的关联很小，它们之间的耦合性很宽松。</p>
<p><strong>2.</strong>其他的相关概念</p>
<p>①类（class）</p>
<p>古语讲，物以类聚，这个“类”说的也是某些特点的在一起，抽象出来了一群人。类是支持继承的抽象数据类型，而对象是类的实例。</p>
<p>②实例（instance）</p>
<p>实例就是类的个体化</p>
<p>③消息（message）</p>
<p>把消息传递进去就有个不同的实例</p>
<p>④方法（method）</p>
<p>对象所能执行的操作，能做什么事情</p>
<p>⑤属性（attribute）</p>
<p>类中定义圆的大小、半径、颜色就是对象的属性，就是对象的特点</p>
<p>⑥封装（encapsulation）</p>
<p>字面上说就是把一个事物包起来，使外界不知道该事物的具体内容，面向对象方法中，把表示对象状态的数据和对数据的操作放到对象内部，只把接口提供出来。因此，它有个清晰的边界，外界是看不到内部的；再有就是有确定的接口，这些接口就是对象能接受的消息，只能向对象发送消息使用它；受保护的内部实现。</p>
<p>⑦继承（inheritance）</p>
<p>广义地说，继承就是直接使用已有的性质和特征，而不必重复定义他们。一个类可以有自己的父类和子类，这就一定具有继承的特性，一个类直接继承其父类的全部描述（数据和操作）。</p>
<p>OK！基本知识就到此了，不充足的会再补充。。。。。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[模块]]></title>
      <url>/2017/04/27/module-1/</url>
      <content type="html"><![CDATA[<p>在开发阶段里总体设计的过程中，我们必须明确系统是“怎么做事情”的了。在软件的设计过程中有些原理和概念是我们必须遵循的，这就是与<strong>模块</strong>有关的知识了！</p>
<h1 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1.模块化"></a>1.模块化</h1><p>先说个有意思的规律：C(x) 定义问题X的复杂程度，函数E(x)定义解决X问题所需要的工作量。对于问题P1和P2，如果</p>
<pre><code>C(P1) &gt; C(P2)
</code></pre><p> 显然       </p>
<pre><code>E(P1) &gt; E(P2)
</code></pre><p>根据人类解决问题的一般经验，一个有意思的规律就是</p>
<pre><code>C(P1+P2) &gt; C(P1)+C(P2)
</code></pre><p>因此也就有了</p>
<pre><code>E(P1+P2) &gt; E(P1)+E(P2)
</code></pre><p>结论是什么呢？就是把复杂的问题给分解成容易解决的小问题，那么大问题就迎刃而解，这是模块化的根据。</p>
<p>这就有个有意思的问题了，无限的分割软件，最后开发软件的工作量确实小的很多了。但模块间的接口的设计就在增多，你去脑洞吧，一个在减少工作量，一个在增加工作量，那模块量多少才是合适？（既是设计模块和模块接口的工作量合适，成本也合适），这个问题再说了！</p>
<h1 id="2-抽象"><a href="#2-抽象" class="headerlink" title="2.抽象"></a>2.抽象</h1><p>抽象是现实世界的事物、状态、过程等相似方面的集中和概括，暂时忽略他们之间的差异，模块就是把抽象出来的某个层次用一定的方式描述出来。因为抽象是一层一层的，因此模块也是有其特点的。</p>
<h1 id="3-逐步求精"><a href="#3-逐步求精" class="headerlink" title="3.逐步求精"></a>3.逐步求精</h1><p>人类认知过程中遵循个Miller法则：一个人在任何时候都只能把注意力集中到[5 9]个知识块上。</p>
<p>因此，在抽象的过程中，有了不同的层次，不同的模块，那么就有了模块的不断地精化。</p>
<h1 id="4-信息隐藏和局部化"><a href="#4-信息隐藏和局部化" class="headerlink" title="4.信息隐藏和局部化"></a>4.信息隐藏和局部化</h1><p>这里隐藏的不是有关模块的所有信息，而是模块之间还要交换那些为了完成系统功能而必须交换的信息，当然是仅仅交换这些信息。模块本身就体现了这一特质。</p>
<h1 id="5-模块独立"><a href="#5-模块独立" class="headerlink" title="5.模块独立"></a>5.模块独立</h1><p>模块的独立是模块化、抽象、信息隐藏和局部化的直接结果。既容易开发又容易测试是模块独立的好处，然而模块之间还是要通信的，那评价模块独立的标准又是是什么呢？<strong>内聚</strong> 和<strong>耦合</strong>。</p>
<p><strong>内聚</strong></p>
<p>内聚说的是一个模块内的事情，从一个最底层的模块说会更容易理解，既然“大家伙”（模块内的各个元素）都是一个“团队”（模块）了，那么我们就要力向一处使（做好一件事情），也就是说模块里的兄弟姐妹们都是与这件事情极其相关的。所以说内聚就是说模块内的元素关系密切，不然放一块干嘛！同理就是模块的设计时，尽量做到模块内的元素关系密切，这才符合模块间的信息隐藏和局部化。</p>
<p><strong>耦合</strong></p>
<p>有了内聚做参考就知道了既然能做同一件事或者相关事情的元素都放到一块去了（成为了一个模块），那么模块之间的关系就是松散的耦合关系喽！因为模块之间不可能做到一点关系都没有，是吧？做到松散耦合就OK了！</p>
<p>好了！以上就是关于模块的理论知识，以后在碰到关于模块的问题时不至于会一脸懵逼吧，，，</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[软件工程方法学（番外篇）]]></title>
      <url>/2017/04/27/module-knowlage1/</url>
      <content type="html"><![CDATA[<p>本篇的主题讲述的是<a href="module-1.md"><strong>模块</strong></a>和<a href="oop.md"><strong>面向对象方法学</strong></a>，这篇番外篇讲的就是“主人公”的生活大环境，内容是下面3方面，“主人公”出现在软件工程的哪个位置、出现的原因、解决了什么问题，主要是这几个方面。</p>
<p>在计算机系统发展历史中，开发软件的错误方法和观念导致了软件危机的出现。为了计算机系统的进一步发展，就逐步发展和完善了软件工程学科。</p>
<p>软件工程方法是软件工程的技术方面的内容，软件工程使用的最广泛的是：<strong>传统方法</strong>和<strong>面向对象方法</strong>。</p>
<p><strong>一、传统方法</strong></p>
<p>又叫做生命周期方法学或者结构化范型，它是把软件生命周期的全过程依次划分为若干阶段，然后顺序的完成每个阶段的任务。OK！你看到了生命周期，它的意思是一个软件从定义、开发、使用和维护，直到被废弃，经历的漫长时期，就类似于一个人的出生、婴儿、童年、青年、中年和老年，直到死亡的漫长期限。</p>
<p>它的阶段有哪些呢？</p>
<p><img src="/image/tra.jpg" alt=""></p>
<p>看到了<a href="module-1.md"><strong>模块</strong></a>思想开始应用的阶段（开发阶段里的总体设计）了吧！当然既然是思想，可以用到的地方必然很多了，在模块化专章里我们具体的讲讲关于它的知识。</p>
<p><strong>二、面向对象方法</strong></p>
<p>对于面向对象方法学，这次就说一个方程就行了：</p>
<h1 id="OO-objects-classes-inheritance-communication-with-messages"><a href="#OO-objects-classes-inheritance-communication-with-messages" class="headerlink" title="OO = objects + classes + inheritance + communication with messages"></a>OO = objects + classes + inheritance + communication with messages</h1><p>意思就是：面向对象就是既使用对象又使用类和继承等机制，而且对象之间仅能通过传递消息实现彼此通信。</p>
<p>OK！下次细细讲解模块化和面向对象方法。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[个人简历]]></title>
      <url>/2017/04/26/resume/</url>
      <content type="html"><![CDATA[<p><strong>姓名：</strong>马帅旗       </p>
<p><strong>籍贯：</strong>河南商丘 </p>
<p><strong>职业：</strong>人生工程师</p>
<p><strong>技能：</strong>精通HTML、CSS、JS 等</p>
<p><strong>座右铭：</strong>爱计算机的工商管理专业兄弟！没事咱们也可以一起聊聊马刺或者一起来个长途骑行！  </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[sublime设置自己的浏览器方法]]></title>
      <url>/2017/04/26/sublime/</url>
      <content type="html"><![CDATA[<p>sublime 中，有个默认的浏览器，就是你鼠标右键点击后出现的，我的是sublime Text 3 </p>
<p><img src="/image/s.png" alt=""></p>
<p>这里的红色部分的Open in brower 就是你的默认浏览器，我的事默认浏览器是IE，当然我想在Chrome里看看效果，并调试一下，怎么设置呢？</p>
<p>点击深绿色的Preferences栏</p>
<p><img src="/image/s2.png" alt=""></p>
<p>看到了Key Bindings 点进去进到如下界面：</p>
<p><img src="/image/s3.png" alt=""></p>
<p>你的是没有红色部分及下面的内容的，这里就是我自己设置的了，你就直接把我的代码放进去就可以了，你能 <strong>随意改</strong> 的是 keys这里的快捷键，再有就是application里的内容，你是要必须改的，换成你的浏览器位置的路径</p>
<p><img src="/image/s4.png" alt=""></p>
<p><strong>注意：</strong>这里的斜杠是怎么写的一定要注意</p>
<p>你要用的代码：<br>//chorme</p>
<p>{</p>
<pre><code>&quot;keys&quot;:[&quot;f6&quot;],

&quot;command&quot;:&quot;side_bar_files_open_with&quot;,

&quot;args&quot;:{

    &quot;paths&quot;:[],

    &quot;application&quot;:&quot;C:\\Users\\asus\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&quot;,

    &quot;extensions&quot;:&quot;.*&quot;
</code></pre><p>}</p>
<p>},<br>//Firefox</p>
<p>{</p>
<pre><code>&quot;keys&quot;:[&quot;f7&quot;],

&quot;command&quot;:&quot;side_bar_files_open_with&quot;,

&quot;args&quot;:{

    &quot;paths&quot;:[],

    &quot;application&quot;:&quot;C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe&quot;,

    &quot;extensions&quot;:&quot;.*&quot;
</code></pre><p>}</p>
<p>}</p>
<p>到了这一步了，你可能会说，我怎么获得我的浏览器的位置呢，ok！在你的桌面上<strong>把鼠标悬浮到你要设置的浏览器上，并点击右键</strong>，会有# <strong>打开文件所在的位置</strong> #这个命令，点击进去，会到这个页面</p>
<p><img src="/image/s5.png" alt=""></p>
<p>找到了，点击上面红色的路径，粘贴到application里去，记得加上后面的chrome.exe，这样就设置好了，以后用的时候直接用快捷键就行了</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客（二）]]></title>
      <url>/2017/04/26/hexo2/</url>
      <content type="html"><![CDATA[<p>上次说到会用网址访问页面，细想了一下，你只要能按我发的那个链接走的话就能很好的出现效果，下面就说说一些必要的注意事项。</p>
<p>1.下载Markdownpad,<a href="http://markdownpad.com/" target="_blank" rel="external">http://markdownpad.com/</a>，这里在windows10里会有个小问题，需要配置个什么小玩意，你自己去搞定啦！</p>
<p>再有就是下载个Notepad++，<a href="https://notepad-plus-plus.org/" target="_blank" rel="external">https://notepad-plus-plus.org/</a>，目的是避免以后你编辑的东西会因为字符集的问题而不能正常使用</p>
<p>2.下载完成后，就按链接里前辈的路子走吧！以下几个命令是常用的，它们执行后的样子是啥样的</p>
<p><strong>hexo g</strong> ##目的是把你修改的东西变成静态文件，每次修改后都要在Git里执行一次这个命令，成功的样子是</p>
<p><img src="/image/12.png" alt=""></p>
<p><strong>hexo s</strong> ##启动服务器，当你想在把东西放到网页上前检查一下的时候用</p>
<p><img src="/image/13.png" alt=""></p>
<p>localhost:4000在这个时候使用，要执行其他的命令就要用Ctrl+C快捷键停止这一步</p>
<p><strong>hexo d</strong> ##把文件部署到github,这一步有意思的东西多，部署成功的标志是，命令执行完后，成功标志</p>
<p><img src="/image/14.png" alt=""></p>
<p>其他的均属未成功，解决方案：重新登录github网站，能进去的话，就把你所遇到的问题粘贴到网上搜索答案，不能进去的话，一个方法就是等到能进去的时候在执行这个命令。</p>
<p>3.主题的配置，当你把Hexo下载完后，是一个默认的主题，后面的主题，你就可以自己去选择了，你可以选择和前辈一样的主题，也可以自己寻找实验，找到更适合你的，安装方法就是去看主题制作者的Readme里面有详细的步骤</p>
<p><strong>注：</strong>有什么不会的我们可以共同讨论，这个主题就先到这里了</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建博客（一）]]></title>
      <url>/2017/04/23/myblog/</url>
      <content type="html"><![CDATA[<p><strong>你目前看到的这个博客就是我才搭建好的属于我自己的简易窝棚，搭建过程中虽然是看着前辈的流程走的，但不得不说我还是踩了很多坑的，好了接下来我向大家说说我的踩坑经历吧！</strong>你也可以参考其他前辈的过程，不过，记住一定要以一个的过程为主，我参考的是<a href="http://tengj.top/2016/02/22/hexo1/" target="_blank" rel="external">http://tengj.top/2016/02/22/hexo1/</a></p>
<ol>
<li>先下载必备的东西Git，通过它把文件托管到本地和github上，必须下载，<a href="https://git-scm.com" title="下载地址" target="_blank" rel="external">https://git-scm.com</a>。<br><img src="/image/g.png" alt="">,右下角的这个位置，注意：电脑系统版本</li>
<li>下载Nodejs去，同样是官网<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a>，<img src="/image/g2.png" alt="最好是最新版本的"></li>
<li>工具已经准备完成，下面就开始操刀吧！</li>
</ol>
<p><strong>首先</strong>，安装Hexo，这里安装的时候可以在nodejs里安装，也可以在Git里安装：</p>
<p>nodejs里：<strong>npm install -g hexo</strong> 或者<strong>npm install hexo-cli -g</strong></p>
<p><img src="/image/nodejs.png" alt=""><br>检测安装成功与否，用<strong>hexo -v</strong> ,出现版本号说明成功</p>
<p>Git里的执行命令是一样的，注意：应该在Git Bash Here里执行同样命令</p>
<p><strong>第二步</strong>，在你建立的blog文件夹下，点击右键出现如下<img src="/image/git.png" alt=""> </p>
<p>执行命令 <strong>hexo init</strong> 自动在目标文件夹建立网站所需要的所有文件。</p>
<p>然后执行<strong>npm install</strong> 安装依赖包<br><strong>第三步</strong>，这一步就是验证以上的操作效果如何了，先执行<strong>hexo g</strong>,这是用于生成静态文件，再执行<strong>hexo s</strong>，这是启动服务器，<img src="img/dis.png" alt="">,执行之后就按图片去看看默认的效果吧！<img src="/image/re.png" alt="">,出现这个效果就完成了初步目的</p>
<p>最后，我们应该知道我们访问的东西是用localhost:4000访问得到的，下一步我们就用域名来获得这个页面，明天见！</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
